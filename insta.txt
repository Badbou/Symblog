-composer require symfony/web-server-bundle --dev  //installer le serveur en mode dev 

-php bin/console server:run   	//lancé le serveur
 
-php bin/console make:controller 	 // creer un controller 

dans le fichier .env renseigner la ligne  DATABASE_URL
php bin/console doctrine:database:create  //creer une base de donnée apres avoir changer la ligne 

php bin/console make:Entity // creer une entity


php bin/console make:migration //migration
php bin/console doctrine:migrations:migrate //migration



 composer require orm-fixtures --dev// pour la fixture 

php bin/console make:fixtures //rajouter fixture 


///////////////////////////////////////////////////////////////
je crée une Entity 

php .\bin\console make:entity



PS C:\wamp64\www\SymBlog> php .\bin\console make:entity

 Class name of the entity to create or update (e.g. DeliciousJellybean):
 > Article

 created: src/Entity/Article.php
 created: src/Repository/ArticleRepository.php

 Entity generated! Now let's add some fields!
 You can always add more fields later manually or by re-running this command.

 New property name (press <return> to stop adding fields):
 > title

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > content

 Field type (enter ? to see all types) [string]:
 > ?

Main types
  * string
  * text
  * boolean
  * integer (or smallint, bigint)
  * float

Relationships / Associations
  * relation (a wizard will help you build the relation)
  * ManyToOne
  * OneToMany
  * ManyToMany
  * OneToOne

Array/Object Types
  * array (or simple_array)
  * json
  * object
  * binary
  * blob

Date/Time Types
  * datetime (or datetime_immutable)
  * datetimetz (or datetimetz_immutable)
  * date (or date_immutable)
  * time (or time_immutable)
  * dateinterval

Other Types
  * json_array
  * decimal
  * guid


 Field type (enter ? to see all types) [string]:
 > text

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > createdDate

 Field type (enter ? to see all types) [string]:
 > datetime

 Can this field be null in the database (nullable) (yes/no) [no]:
 >

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > image

 Field type (enter ? to see all types) [string]:
 >

 Field length [255]:
 >

 Can this field be null in the database (nullable) (yes/no) [no]:
 > yes

 updated: src/Entity/Article.php

 Add another property? Enter the property name (or press <return> to stop adding fields):
 > author

 Field type (enter ? to see all types) [string]:
 > ?

Main types
  * string
  * text
  * boolean
  * integer (or smallint, bigint)
  * float

Relationships / Associations
  * relation (a wizard will help you build the relation)
  * ManyToOne
  * OneToMany
  * ManyToMany
  * OneToOne

Array/Object Types
  * array (or simple_array)
  * json
  * object
  * binary
  * blob

Date/Time Types
  * datetime (or datetime_immutable)
  * datetimetz (or datetimetz_immutable)
  * date (or date_immutable)
  * time (or time_immutable)
  * dateinterval

Other Types
  * json_array
  * decimal
  * guid


 Field type (enter ? to see all types) [string]:
 > relation

 What class should this entity be related to?:
 > Users

What type of relationship is this?
 ------------ ---------------------------------------------------------------
  Type         Description
 ------------ ---------------------------------------------------------------
  ManyToOne    Each Article relates to (has) one Users.
               Each Users can relate/has to (have) many Article objects

  OneToMany    Each Article relates can relate to (have) many Users objects.
               Each Users relates to (has) one Article

  ManyToMany   Each Article relates can relate to (have) many Users objects.
               Each Users can also relate to (have) many Article objects

  OneToOne     Each Article relates to (has) exactly one Users.
               Each Users also relates to (has) exactly one Article.
 ------------ ---------------------------------------------------------------

 Relation type? [ManyToOne, OneToMany, ManyToMany, OneToOne]:
 > ManyToOne

 Is the Article.author property allowed to be null (nullable)? (yes/no) [yes]:
 > no

 Do you want to add a new property to Users so that you can access/update Article objects from it - e.g. $users->getArticles()? (yes/no) [yes]:
 >

 A new property will also be added to the Users class so that you can access the related Article objects from it.

 New field name inside Users [articles]:
 >

 Do you want to activate orphanRemoval on your relationship?
 A Article is "orphaned" when it is removed from its related Users.
ved from its related U
sers.
 e.g. $users->removeArticle($article)   e Users to another, answer "no".

 NOTE: If a Article may *change* from onhaned App\Entity\Article objects (orphanRemovae Users to another, an
swer "no".

 Do you want to automatically delete orp
 NOTE: If a Article may *change* from on
e Users to a
nother, answer "no".                    y name (or press <return> to stop adding field

 NOTE: If a Article may *change* from one Users to another, answer "no".
 Do you want to automatically delete orphaned App\Entity\Article objects (orphanRemoval)? (yes/no) [no]: >
 updated: src/Entity/Article.php
 updated: src/Entity/Users.php

 Add another property? Enter the property name (or press <return> to stop adding field


///////////////////////////////////////////////////////

Je fais une migratrion 


 Next: When you're ready, create a migration with make:migration
PS C:\wamp64\www\SymBlog> php bin/console make:migrationPS C:\wamp64\www\SymBlog>
  Success!


 Next: Review the new migration "src/Migrations/Version20180910124459.php"
 Then: Run the migration with php bin/console doctrine:migrations:migrate
 See https://symfony.com/doc/current/bundles/DoctrineMigrationsBundle/index.html


//////////////////////////////////////////////////////////////////

J'injecte dans la base de donnée 

PS C:\wamp64\www\SymBlog> php bin/console doctrine:migrations:migrate

                    Application Migrations


WARNING! You are about to execute a database migration that could result in
schema changes and data loss. Are you sure you wish to continue? (y/n)y
Migrating up to 20180910124459 from 20180906122022

  ++ migrating 20180910124459

     -> CREATE TABLE article (id INT AUTO_INCREMENT NOT NULL, author_id INT
NOT NULL, title VARCHAR(255) NOT NULL, content LONGTEXT NOT NULL, created_date DATETIME NOT NULL, image VARCHAR(255) DEFAULT NULL, INDEX IDX_23A0E66F675F31B (author_id), PRIMARY KEY(id)) DEFAULT CHARACTER SET utf8mb4 COLLATE utfHARACTER SET utf8mb4 COLLATE ut
f8mb4_unicode_ci ENGINE = InnoDB            K_23A0E66F675F31B FOREIGN KEY (a     -> ALTER TABLE article ADD CONSTRAINT F
K_23A0E66F675F31B FOREIGN KEY (
author_id) REFERENCES users (id)
F31B (author_id), PRIMARY KEY(id)) DEFAULT C
HARACTER SET utf8mb4 COLLAT
E utf8mb4_unicode_ci ENGINE = InnoDB
     -> ALTER TABLE article ADD CONSTRAINT F
K_23A0E66F675F31B FOREIGN K
EY (author_id) REFERENCES users (id)
                                            ke:controller
  ++ migrated (0.2s)
     -> ALTER TABLE article ADD CONSTRAINT  g. GentleElephantController):
 FK_23A0E66F675F31B FOR
EIGN KEY (author_id) REFERENCES users (id)                                            hp
  ++ migrated (0.2s)

     -> ALTER TABLE article ADD CONSTRAINTma
 FK_23A0E66F675F31B FO
REIGN KEY (author_id) REFERENCES users (id
)                                         e.
                                            d some pages!
  ++ migrated (0.2s)

     -> ALTER TABLE article ADD CONSTRAINT
 FK_23A0E66F675F31B                       .p
 FOREIGN KEY (author_id) REFERENCES users(id)                                      g

  ++ migrated (0.2s)

     -> ALTER TABLE article ADD CONSTRAINT
 FK_23A0E66F675F
31B FOREIGN KEY (author_id) REFERENCES useadrs (id)

  ++ migrated (0.2s)

     -> ALTER TABLE article ADD CONSTRAINT
 FK_23A0E66F675F31B FOREIGN KEY (author_id) REFERENCES us
ers (id)

  ++ migrated (0.2s)

  ------------------------
  ++ finished in 0.2s
  ++ 1 migrations executed
  ++ 2 sql queries
PS C:\wamp64\www\SymBlog> php bin/console
F31B FOREIGN KEY (author_id) REFERENCES us
ers (i
d)
  ++ migrated (0.2s)

  ------------------------

  ++ finished in 0.2s
  ++ 1 migrations executed  ++ 2 sql queries
PS C:\wamp64\www\SymBlog> php bin/console
make:c
ontroller

 Choose a name for your controller class (
PS C:\wamp64\www\SymBlog> php bin/console
ma
  ------------------------

  ++ finished in 0.2s
  ++ 1 migrations executed  ++ 2 sql queries


/////////////////////////////////////////////////////////////////////

je crée mon controller 


PS C:\wamp64\www\SymBlog> php bin/console make:controller
 Choose a name for your controller class (e.g. GentleElephantController):
 > ArticleController created: src/Controller/ArticleController.php created: templates/article/index.html.twig
  Success!
 Next: Open your new controller class and add some pages!


//////////////////////////////////////////////////////////////////////


je crée ma page 	addArtcile.html.twig




/////////////////////////////////////////////////////////

Article controller 

 use App\Repository\ArticleRepository;  //je met la route






